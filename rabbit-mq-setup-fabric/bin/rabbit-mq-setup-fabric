#!/usr/bin/env php
<?php

/** @var Composer\Autoload\ClassLoader $loader */
$loader = require __DIR__.'/../vendor/autoload.php';

use Symfony\Component\Yaml\Yaml;
use PhpAmqpLib\Connection\AMQPStreamConnection;

/*
 * By default: ennvironment 'dev'
 *
 * Examples:
 *
 * ./bin/rabbit-mq-setup-fabric
 * ./bin/rabbit-mq-setup-fabric -e=dev
 * ./bin/rabbit-mq-setup-fabric -e=prod
 */
$options = getopt("e::", []);
$environment = !isset($options['e']) ? 'dev': strtolower($options['e']);

if ('dev' === $environment) {
    $dotenv = new Symfony\Component\Dotenv\Dotenv();
    $dotenv->load(__DIR__.'/../.env.dist');
}

$rabbitSetUp = Yaml::parse(file_get_contents(__DIR__.'/../.rabbit-mq-setup-fabric.yml'));

$connection = new AMQPStreamConnection(
        getenv('RABBITMQ_HOST'),
        getenv('RABBITMQ_PORT'),
        getenv('RABBITMQ_USER'),
        getenv('RABBITMQ_PASSWORD'),
        getenv('RABBITMQ_VHOST')
);
$channel = $connection->channel();


if (!isset($rabbitSetUp['exchanges']) || !isset($rabbitSetUp['queues'])) {
    throw new \Exception('Undefined exchanges or queues');
}

try {

    foreach ($rabbitSetUp['exchanges'] as $exchange) {
        $channel->exchange_declare(
            $exchange['name'],
            $exchange['type'],
            $exchange['passive'],
            $exchange['durable'],
            $exchange['auto_delete']
        );
    }

    foreach ($rabbitSetUp['queues'] as $queue) {
        $channel->queue_declare(
            $queue['name'],
            $queue['passive'],
            $queue['durable'],
            $queue['exclusive'],
            $queue['auto_delete']
        );

        $channel->queue_bind($queue['name'], $queue['exchange'], $queue['routing']);
    }

    echo 'All OK' . PHP_EOL;
    return 0;

} catch (\Throwable $exception) {
    echo sprintf('RabbitMQ error: %s%s', $exception->getMessage(), PHP_EOL);
    return 1;
}
